# Advanced Cryptocurrency Trading System

A sophisticated cryptocurrency trading system with multiple strategies, real-time monitoring, and risk management.

## Features

- Multiple optimized trading strategies:
  - Momentum Trading
  - Trend Following
  - Mean Reversion
- Real-time data streaming from Kraken
- Advanced risk management system
- Performance monitoring dashboard
- Automated backtesting and optimization
- Comprehensive logging and error handling

## Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/trading_strategy.git
cd trading_strategy
```

2. Create and activate virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: .\venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Install TA-Lib (platform specific):

Ubuntu/Debian:
```bash
sudo apt-get install ta-lib
```

macOS:
```bash
brew install ta-lib
```

Windows:
Download and install from [TA-Lib Windows](http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-msvc.zip)

## Configuration

1. Copy environment template:
```bash
cp config/.env.template config/.env
```

2. Edit `.env` with your settings:
- Database credentials
- Kraken API keys
- Trading parameters
- Alert settings

3. Configure trading parameters in `config/trading_config.yaml`:
- Risk management settings
- Strategy parameters
- Optimization settings

## Usage

1. Start in Paper Trading Mode (Recommended for Testing):
```bash
python scripts/deploy.py --mode paper
```

2. Run Backtesting:
```bash
python scripts/deploy.py --mode backtest
```

3. Start Live Trading (Only after thorough testing):
```bash
python scripts/deploy.py --mode full
```

4. Access the Dashboard:
- Open `http://localhost:8050` in your browser
- Monitor performance metrics
- View active trades
- Track system health

## System Components

### Strategies

1. Momentum Strategy
- Uses RSI, MACD, and volume analysis
- Optimized for short-term price movements
- Configurable parameters in config.yaml

2. Trend Following Strategy
- Multi-timeframe trend analysis
- Dynamic trend strength calculation
- Adaptive position sizing

3. Mean Reversion Strategy
- Statistical analysis for price deviations
- Probability-based entry signals
- Volume-weighted position sizing

### Risk Management

- Kelly Criterion position sizing
- Dynamic risk adjustment
- Portfolio correlation controls
- Maximum drawdown protection
- Value at Risk (VaR) limits

### Monitoring

- Real-time performance metrics
- Equity curve tracking
- Trade distribution analysis
- Risk metrics dashboard
- System health monitoring

## Testing

Run the test suite:
```bash
pytest tests/
```

Test coverage report:
```bash
pytest --cov=src tests/
```

## Development Workflow

1. Test in Sandbox:
- Use Kraken's sandbox environment
- Test with paper trading
- Verify all components

2. Optimize Strategies:
- Run backtests
- Optimize parameters
- Validate results

3. Monitor Performance:
- Track key metrics
- Analyze trade distribution
- Monitor risk levels

4. Deploy Updates:
- Test changes in sandbox
- Verify system stability
- Deploy to production

## Maintenance

1. Regular Tasks:
- Check system logs daily
- Monitor error rates
- Review performance metrics
- Update parameters as needed

2. Database Maintenance:
```bash
# Backup database
pg_dump trading_db > backup.sql

# Run migrations
alembic upgrade head
```

3. Log Management:
```bash
# Rotate logs
python scripts/manage_logs.py --rotate

# Archive old logs
python scripts/manage_logs.py --archive
```

## Troubleshooting

1. Connection Issues:
- Check API credentials
- Verify network connectivity
- Review error logs

2. Performance Issues:
- Monitor system resources
- Check database performance
- Review trade execution times

3. Strategy Issues:
- Analyze backtest results
- Review risk parameters
- Check signal generation

## Support

For issues and feature requests:
1. Check the existing issues
2. Create a detailed bug report
3. Include relevant logs and configurations

## License

MIT License - see LICENSE file for details

## Contributing

1. Fork the repository
2. Create your feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request